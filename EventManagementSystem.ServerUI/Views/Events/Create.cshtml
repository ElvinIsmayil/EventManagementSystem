@using EventManagementSystem.BLL.ViewModels.Event
@model EventCreateVM

@{
    ViewData["Title"] = "Create Event";
    // Assuming you'll pass SelectLists for dropdowns via ViewData or ViewBag
    // For example: ViewData["EventTypes"] = new SelectList(eventTypes, "Id", "Name");
    // ViewData["Locations"] = new SelectList(locations, "Id", "Name");
    // ViewData["Organizers"] = new SelectList(organizers, "Id", "Name");
}

<div class="content d-flex flex-column flex-column-fluid" id="kt_content">
    <div class="toolbar" id="kt_toolbar">
        <div id="kt_toolbar_container" class="container-fluid d-flex flex-stack">
            <div data-kt-swapper="true" data-kt-swapper-mode="prepend" data-kt-swapper-parent="{default: '#kt_content_container', 'lg': '#kt_toolbar_container'}" class="page-title d-flex align-items-center flex-wrap me-3 mb-5 mb-lg-0">
                <h1 class="d-flex align-items-center text-dark fw-bolder fs-3 my-1">Create Event</h1>
                <span class="h-20px border-gray-200 border-start mx-4"></span>
                <ul class="breadcrumb breadcrumb-separatorless fw-bold fs-7 my-1">
                    <li class="breadcrumb-item text-muted">
                        <a asp-controller="Dashboard" asp-action="Index" class="text-muted text-hover-primary">Home</a>
                    </li>
                    <li class="breadcrumb-item">
                        <span class="bullet bg-gray-200 w-5px h-2px"></span>
                    </li>
                    <li class="breadcrumb-item text-muted">Events</li>
                    <li class="breadcrumb-item">
                        <span class="bullet bg-gray-200 w-5px h-2px"></span>
                    </li>
                    <li class="breadcrumb-item text-dark">Create Event</li>
                </ul>
            </div>
            <div class="d-flex align-items-center gap-3">
                <a asp-controller="Events" asp-action="Index" class="btn btn-sm btn-light-primary fw-bold px-6">
                    <i class="ki-outline ki-arrow-left fs-4 me-2"></i> Back to List
                </a>
            </div>
        </div>
    </div>
    <div class="post d-flex flex-column-fluid" id="kt_post">
        <div id="kt_content_container" class="container-xxl">
            <div class="card">
                <div class="card-header border-0 pt-6">
                    <div class="card-title">
                        <h3 class="card-label">Fill in Event Details</h3>
                    </div>
                </div>
                <div class="card-body pt-0">
                    <form asp-controller="Events" asp-action="Create" method="post" enctype="multipart/form-data" id="event-create-form">
                        @Html.AntiForgeryToken()

                        <div class="mb-10">
                            <label asp-for="Title" class="form-label fw-bold">Title</label>
                            <input asp-for="Title" class="form-control form-control-solid" placeholder="Enter event title" />
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>

                        <div class="mb-10">
                            <label asp-for="Description" class="form-label fw-bold">Description</label>
                            <textarea asp-for="Description" class="form-control form-control-solid" rows="3" placeholder="Enter event description"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <div class="mb-10">
                            <label asp-for="StartDate" class="form-label fw-bold">Start Date</label>
                            <input asp-for="StartDate" type="datetime-local" class="form-control form-control-solid" />
                            <span asp-validation-for="StartDate" class="text-danger"></span>
                        </div>

                        <div class="mb-10">
                            <label asp-for="EndDate" class="form-label fw-bold">End Date</label>
                            <input asp-for="EndDate" type="datetime-local" class="form-control form-control-solid" />
                            <span asp-validation-for="EndDate" class="text-danger"></span>
                        </div>

                        <div class="mb-10">
                            <label asp-for="EventTypeId" class="form-label fw-bold">Event Type</label>
                            <select asp-for="EventTypeId" class="form-select form-select-solid"
                                    asp-items="@(ViewData["EventTypes"] as SelectList)"
                                    data-control="select2" data-placeholder="Select an Event Type">
                                <option value="">Select an Event Type</option>
                            </select>
                            <span asp-validation-for="EventTypeId" class="text-danger"></span>
                        </div>

                        <div class="mb-10">
                            <label asp-for="LocationId" class="form-label fw-bold">Location</label>
                            <select asp-for="LocationId" class="form-select form-select-solid"
                                    asp-items="@(ViewData["Locations"] as SelectList)"
                                    data-control="select2" data-placeholder="Select a Location">
                                <option value="">Select a Location</option>
                            </select>
                            <span asp-validation-for="LocationId" class="text-danger"></span>
                        </div>

                        <div class="mb-10">
                            <label asp-for="OrganizerId" class="form-label fw-bold">Organizer</label>
                            <select asp-for="OrganizerId" class="form-select form-select-solid"
                                    asp-items="@(ViewData["Organizers"] as SelectList)"
                                    data-control="select2" data-placeholder="Select an Organizer">
                                <option value="">Select an Organizer</option>
                            </select>
                            <span asp-validation-for="OrganizerId" class="text-danger"></span>
                        </div>

                        <div class="separator separator-dashed my-10"></div>

                        <h3>@Html.DisplayNameFor(model => model.EventPhotos)</h3>
                        <div id="photos-container">
                            @if (Model?.EventPhotos != null)
                            {
                                for (int i = 0; i < Model.EventPhotos.Count; i++)
                                {
                                    <div class="card card-dashed card-xl-stretch mb-xl-8 photo-item">
                                        <div class="card-body">
                                            <div class="d-flex align-items-center mb-5">
                                                <div class="flex-grow-1">
                                                    <h4 class="mb-0">Photo #<span class="photo-number">@(i + 1)</span></h4>
                                                </div>
                                                <button type="button" class="btn btn-sm btn-icon btn-light-danger remove-photo-btn">
                                                    <i class="ki-outline ki-cross fs-2"></i>
                                                </button>
                                            </div>
                                            <div class="mb-5">
                                                <label class="form-label fw-bold">Image File</label>
                                                <input type="file" name="EventPhotos[@i].PhotoFile" class="form-control form-control-solid" accept="image/*" @(Model.EventPhotos.ElementAt(i).PhotoFile == null ? "required" : "") />
                                                <span class="text-danger" data-valmsg-for="EventPhotos[@i].PhotoFile"></span>
                                            </div>
                                            <div class="mb-5">
                                                <label class="form-label fw-bold">Description</label>
                                                <textarea name="EventPhotos[@i].Description" class="form-control form-control-solid" rows="2" placeholder="Enter photo description">@Model.EventPhotos.ElementAt(i).Description</textarea>
                                                <span class="text-danger" data-valmsg-for="EventPhotos[@i].Description"></span>
                                            </div>
                                            <div class="mb-5">
                                                <label class="form-label fw-bold">Order</label>
                                                <input type="number" name="EventPhotos[@i].Order" class="form-control form-control-solid" value="@Model.EventPhotos.ElementAt(i).Order" />
                                                <span class="text-danger" data-valmsg-for="EventPhotos[@i].Order"></span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>

                        <button type="button" id="add-photo-btn" class="btn btn-light-primary mb-10">
                            <i class="ki-outline ki-plus fs-2"></i> Add New Photo
                        </button>

                        <div class="text-end">
                            <button type="submit" class="btn btn-primary">Create Event</button>
                            <a asp-controller="Events" asp-action="Index" class="btn btn-light">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const photosContainer = document.getElementById('photos-container');
            const addPhotoBtn = document.getElementById('add-photo-btn');
            let photoIndex = @(Model?.EventPhotos?.Count ?? 0); // Start index for new photos

            function updatePhotoNumbers() {
                const photoItems = photosContainer.querySelectorAll('.photo-item');
                photoItems.forEach((item, index) => {
                    item.querySelector('.photo-number').textContent = index + 1;
                    item.querySelectorAll('[name^="EventPhotos["]').forEach(input => {
                        const originalName = input.name;
                        // Regex to replace the index part of "EventPhotos[X]"
                        const newName = originalName.replace(/EventPhotos\[\d+\]/, `EventPhotos[${index}]`);
                        input.name = newName;
                        // Update validation message attributes if necessary
                        const validationSpan = item.querySelector(`[data-valmsg-for="${originalName}"]`);
                        if (validationSpan) {
                            validationSpan.setAttribute('data-valmsg-for', newName);
                        }
                    });
                });
            }

            addPhotoBtn.addEventListener('click', function () {
                const newPhotoHtml = `
                    <div class="card card-dashed card-xl-stretch mb-xl-8 photo-item">
                        <div class="card-body">
                            <div class="d-flex align-items-center mb-5">
                                <div class="flex-grow-1">
                                    <h4 class="mb-0">Photo #<span class="photo-number">${photoIndex + 1}</span></h4>
                                </div>
                                <button type="button" class="btn btn-sm btn-icon btn-light-danger remove-photo-btn">
                                    <i class="ki-outline ki-cross fs-2"></i>
                                </button>
                            </div>
                            <div class="mb-5">
                                <label class="form-label fw-bold">Image File</label>
                                <input type="file" name="EventPhotos[${photoIndex}].PhotoFile" class="form-control form-control-solid" accept="image/*" required />
                                <span class="text-danger" data-valmsg-for="EventPhotos[${photoIndex}].PhotoFile"></span>
                            </div>
                            <div class="mb-5">
                                <label class="form-label fw-bold">Description</label>
                                <textarea name="EventPhotos[${photoIndex}].Description" class="form-control form-control-solid" rows="2" placeholder="Enter photo description"></textarea>
                                <span class="text-danger" data-valmsg-for="EventPhotos[${photoIndex}].Description"></span>
                            </div>
                            <div class="mb-5">
                                <label class="form-label fw-bold">Order</label>
                                <input type="number" name="EventPhotos[${photoIndex}].Order" class="form-control form-control-solid" value="0" />
                                <span class="text-danger" data-valmsg-for="EventPhotos[${photoIndex}].Order"></span>
                            </div>
                        </div>
                    </div>
                `;
                photosContainer.insertAdjacentHTML('beforeend', newPhotoHtml);
                photoIndex++;
                updatePhotoNumbers(); // Update numbers after adding
                rebindValidation(); // Rebind validation for newly added elements
            });

            // Event delegation for remove buttons
            photosContainer.addEventListener('click', function (event) {
                if (event.target.closest('.remove-photo-btn')) {
                    const button = event.target.closest('.remove-photo-btn');
                    // Using SweetAlert2 for a nicer confirmation dialog
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({
                            title: 'Are you sure?',
                            text: "You are about to remove this photo. This action cannot be undone.",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#d33',
                            cancelButtonColor: '#3085d6',
                            confirmButtonText: 'Yes, remove it!'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                button.closest('.photo-item').remove();
                                updatePhotoNumbers(); // Update numbers after removal
                                // Using Toastr for success notification
                                if (typeof toastr !== 'undefined') {
                                    toastr.success('Photo removed successfully.');
                                }
                                rebindValidation(); // Rebind validation after removal
                            }
                        });
                    } else {
                        // Fallback to native confirm if SweetAlert2 is not available
                        if (confirm('Are you sure you want to remove this photo?')) {
                            button.closest('.photo-item').remove();
                            updatePhotoNumbers();
                            rebindValidation();
                        }
                    }
                }
            });

            // Initial update of photo numbers in case of existing photos (e.g., after validation error reload)
            updatePhotoNumbers();
        });
    </script>
}
