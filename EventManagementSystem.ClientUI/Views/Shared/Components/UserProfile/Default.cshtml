@model ProfileHeaderVM

<ul class="navbar-nav">
    @if (Model.IsLoggedIn)
    {
        <li class="relative">
            <div class="flex items-center gap-2 p-2 px-3 rounded-md cursor-pointer transition-all duration-150 ease-in-out hover:bg-gray-100"
                 id="profileDropdownToggle"
                 aria-haspopup="true"
                 aria-expanded="false"
                 role="button"
                 tabindex="0">
                @{
                    string profileImageUrl = !string.IsNullOrEmpty(Model.ImageUrl) ? Model.ImageUrl : "/images/default_avatar.png";
                }
                <img src="@profileImageUrl"
                     alt="@Model.Fullname Profile"
                     class="w-9 h-9 md:w-10 md:h-10 rounded-full object-cover border-2 border-white shadow-sm transition-all duration-150 ease-in-out hover:scale-105 hover:shadow-md" />
                <span class="font-medium text-gray-900 transition-all duration-150 ease-in-out hover:text-indigo-600 hidden md:block">@Model.Fullname</span>
                <svg class="w-3 h-3 text-gray-700 ml-1 transition-transform duration-200"
                     id="profileDropdownArrow"
                     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24">
                    <polyline points="6 9 12 15 18 9"></polyline>
                </svg>
            </div>

            <div class="profile-dropdown-menu absolute right-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg py-2 min-w-[200px] z-50
                            opacity-0 pointer-events-none transform translate-y-2 transition-all duration-200 ease-in-out"
                 aria-labelledby="profileDropdownToggle"
                 role="menu">

                <div class="px-4 py-2 text-sm">
                    <div class="font-bold text-gray-800">@Model.Fullname</div>
                    <div class="text-gray-600">@Model.Email</div>
                    @if (!string.IsNullOrEmpty(Model.Role))
                    {
                        <div class="mt-1 inline-block px-2 py-1 bg-indigo-100 text-indigo-700 text-xs font-semibold rounded-full">
                            @Model.Role
                        </div>
                    }
                </div>
                <div class="my-1 border-t border-gray-200"></div>

                <a class="flex items-center gap-2 px-4 py-2 text-gray-700 transition-all duration-150 ease-in-out hover:bg-gray-100 hover:text-indigo-600 no-underline"
                   asp-controller="Profiles" asp-action="Details" asp-route-id="@Model.Id" role="menuitem">
                    <svg class="w-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                    My Profile
                </a>

                @if (!Model.EmailConfirmed)
                {
                    <a class="flex items-center gap-2 px-4 py-2 text-orange-600 transition-all duration-150 ease-in-out hover:bg-orange-50 hover:text-orange-700 no-underline"
                       asp-controller="Auth" asp-action="ResendEmailConfirmation" role="menuitem">
                        <svg class="w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v3h8z"></path>
                        </svg>
                        Verify Email
                    </a>
                }

                <a class="flex items-center gap-2 px-4 py-2 text-gray-700 transition-all duration-150 ease-in-out hover:bg-gray-100 hover:text-indigo-600 no-underline"
                   asp-controller="Profiles" asp-action="Edit" asp-route-id="@Model.Id" role="menuitem">
                    <svg class="w-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                    Settings
                </a>
                <div class="my-1 border-t border-gray-200"></div>
                <form asp-controller="Auth" asp-action="SignOut" method="post" class="w-full">
                    <button type="submit" class="flex items-center gap-2 px-4 py-2 text-red-500 transition-all duration-150 ease-in-out hover:bg-red-50 hover:text-red-600 w-full text-left" role="menuitem">
                        <svg class="w-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                        </svg>
                        Sign Out
                    </button>
                </form>
            </div>
        </li>
    }
    else
    {
        <li class="nav-item">
            <div class="flex items-center">
                <a asp-controller="Auth" asp-action="SignIn" class="inline-flex items-center justify-center px-4 py-2 border border-transparent text-base font-medium rounded-md text-indigo-600 bg-white hover:bg-gray-50 mr-2">
                    Sign In
                </a>
                <a asp-controller="Auth" asp-action="SignUp" class="inline-flex items-center justify-center px-4 py-2 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700">
                    Sign Up
                </a>
            </div>
        </li>
    }
</ul>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const profileDropdownToggle = document.getElementById('profileDropdownToggle');
        const profileDropdownMenu = document.querySelector('.profile-dropdown-menu');
        const profileDropdownArrow = document.getElementById('profileDropdownArrow');

        if (profileDropdownToggle && profileDropdownMenu && profileDropdownArrow) {
            let timeout;

            function openDropdown() {
                clearTimeout(timeout);
                profileDropdownMenu.classList.remove('opacity-0', 'pointer-events-none', 'translate-y-2');
                profileDropdownMenu.classList.add('opacity-100', 'translate-y-0');
                profileDropdownToggle.setAttribute('aria-expanded', 'true');
                profileDropdownArrow.classList.add('rotate-180');
            }

            function closeDropdown() {
                timeout = setTimeout(() => {
                    profileDropdownMenu.classList.remove('opacity-100', 'translate-y-0');
                    profileDropdownMenu.classList.add('opacity-0', 'pointer-events-none', 'translate-y-2');
                    profileDropdownToggle.setAttribute('aria-expanded', 'false');
                    profileDropdownArrow.classList.remove('rotate-180');
                }, 50);
            }

            profileDropdownToggle.addEventListener('click', function() {
                if (profileDropdownMenu.classList.contains('opacity-100')) {
                    closeDropdown();
                } else {
                    openDropdown();
                }
            });

            document.addEventListener('click', function(event) {
                if (!profileDropdownToggle.contains(event.target) && !profileDropdownMenu.contains(event.target)) {
                    closeDropdown();
                }
            });

            document.addEventListener('keydown', function(event) {
                if (event.key === 'Escape' && profileDropdownMenu.classList.contains('opacity-100')) {
                    closeDropdown();
                }
            });
        }
    });
</script>